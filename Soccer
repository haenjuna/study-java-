public class Soccer { // 싸커 클래스 정의
	Field field;
	Ball ball;
	Player p, q, r;
	boolean timeout, goal;
	int clock;

	public static void main(String a[]) {
		new Soccer();
	}

	Soccer() {
		field = new Field(128, 96);
		ball = new Ball(field);
		p = new Player("손", "P", field, -50, 10);
		q = new Player("이", "Q", field, 50, -10);
		start();
	}

	void start() {	//시작을 알림
		System.out.println("*START*");
		timeout = false;
		run();
	}

	void stop() {	//종료를 알림
		System.out.println("*STOP*");
		timeout = true; // timeout값을 true로 바꿈
	}

	void run() {
		System.out.println("*RUN*");
		clock = 0; // 시작 시간을 0으로 설정
		while (!timeout) { // timeout이 true로 변경 시 종료
			clock++;
			System.out.print("[" + clock + "]");
			int dist = p.move(ball);
			int distq = q.move(ball);
			r = p; // r은 공을 찰수있는 권한, 더 가까이 있는 사람이 r이된다
			if (distq < dist) {
				r = q;
				dist = distq;
			}
			if (dist < 5) {
				r.kick(ball);
				System.out.print(" -> " + r.name + " kicks -> ");
			}
			goal = ball.move(); //ball.move의 조견을 달성해야함
			if (goal) {
				System.out.println("*골인*");
			}
			show();
			try { // 0.2 출력을 늦춤
				Thread.sleep(200);
			} catch (Exception e) {
			}
			if (clock > 45)
				stop();
		}
		System.out.println("*TIME OUT*");
	}

	void show() { /* member variables: {field, b, p, q} */
		int dH = 10, dW = 3; // 출력 시 전체적으로 크기를 줄여줌
		int bx = ball.getX() / dW;
		int by = ball.getY() / dH;
		int px = p.getX() / dW;
		int py = p.getY() / dH;
		int qy = q.getY() / dH;
		int qx = q.getX() / dW;

		hline(field.getRight() / dW - field.getLeft() / dW + 1);
		for (int r = field.getTop() / dH; r <= field.getBottom() / dH; r++) {
			tpr("|");
			for (int i = field.getLeft() / dW; i <= field.getRight() / dW; i++) {
				if (r == by && i == bx) {
					tpr("*");
					if (r == py && i == px) {
						tpr("p");
						i++;
						if (r == qy && i == qx) {
							tpr("q");
							i++;
						}
					} else if (r == qy && i == qx) {
						tpr("q");
						i++;
					}
				} else if (r == py && i == px) {
					tpr("p");
					if (r == qy && i == qx) {
						tpr("q");
						i++;
					}
				} else if (r == qy && i == qx) {
					tpr("q");
				} else { /* if (r == 0 && i == 0) tpr("+"); else */
					tpr(" ");
				}
			}
			tprl("|" + r);
		}
		hline(field.getRight() / dW - field.getLeft() / dW + 1);
	}

	void hline(int n) {
		tpr("+");
		for (int i = 1; i <= n; i++)
			tpr("-");
		tprl("+");
	}

	void tpr(String s) {
		System.out.print(s);
	}

	void tprl(String s) {
		System.out.println(s);
	}
}

class Field {
	int x0, x1, y0, y1, w, h;

	Field(int wide, int high) {
		w = wide;
		h = high;
		x1 = w / 2;
		y1 = h / 2;
		x0 = -x1;
		y0 = -y1;
	}

	int getLeft() {
		return x0;
	}

	int getRight() {
		return x1;
	}

	int getTop() {
		return y0;
	}

	int getBottom() {
		return y1;
	}
}

class Ball { // ball 클래스
	Field f; // Field형의 f
	private int x, y; 
	private double vx, vy;

	Ball(Field f) { // 생성자
		x = 0;
		y = 0;
		vx = 0;
		vy = 0;
		this.f = f;
	}

	boolean move() { // 공을 움직임
		x += vx;
		vx = vx * 0.8; // 공 x방향 속도를 줄임
		y += vy;
		vy = vy * 0.8; // 공 y방향 속도를 줄임
		checkBounds();
		System.out.println("공(" + x + "," + y + ").");
		return (x > f.getRight() - 1 || x < f.getLeft() + 1);
	}

	void fly(double kx, double ky) { //차이면 가속을 받음
		this.vx += kx;
		this.vy += ky;
	}

	int getX() {
		return (int) x;
	}

	int getY() {
		return (int) y;
	}

	void checkBounds() { // 공이 필드의 정해진 거리를 벗어나지 못하고 튕겨나오게함
		if (x < f.getLeft()) {
			vx = -vx;
			x = 2 * f.getLeft() - x;
		}
		if (x > f.getRight()) {
			vx = -vx;
			x = 2 * f.getRight() - x;
		}
		if (y > f.getBottom()) {
			vy = -vy;
			y = 2 * f.getBottom() - y;
		}
		if (y < f.getTop()) {
			vy = -vy;
			y = 2 * f.getTop() - y;
		}
	}
}

class Player {
	Field f;
	int x, y;
	double dx, dy, speed;
	String name, team;

	Player(String 이름, String tm, Field f, int x0, int y0) {
		name = 이름;
		x = x0;
		y = y0;
		team = tm;
		this.f = f;
	}

	int move(Ball b) { // 공을 향해 이동
		dash(b);
		x = x + (int) dx;
		y = y + (int) dy;
		int dist = (int) distance(b);
		System.out.print(name + " " + dist);
		return dist;
	}

	double distance(Ball b) {
		double x2x = x - b.getX();
		double y2y = y - b.getY();
		return Math.sqrt(x2x * x2x + y2y * y2y);
	}

	void kick(Ball b) {
		double kx = dx * 2 + randM(10) - 5;
		double ky = dy * 2 + randM(8) - 4;
		b.fly(kx, ky);
		speed = speed / 2;
	}

	double randM(int M) {
		return Math.random() * M;
	}

	void dash(Ball b) { // 선수의 속력
		double dist = distance(b) + 1;
		speed = speed * 0.8 + randM(4);
		dx = (b.getX() - x) / dist * speed;
		dy = (b.getY() - y) / dist * speed;
	}

	int getX() {
		return x;
	}

	int getY() {
		return y;
	}
}
